package practicum;

/**
 * A class representing a playing card from a standard deck.
 */
public class PlayingCard {

    /**
     * An enumeration of the possible ranks of a playing card.
     */
    public enum Rank {
        TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING, ACE
    }

    /**
     * An enumeration of the possible suits of a playing card.
     */
    public enum Suit {
        HEARTS, DIAMONDS, CLUBS, SPADES
    }

    /**
     * The rank of the card, i.e., TWO, THREE, ..., ACE.
     */
    private final Rank rank;

    /**
     * The suit of the card, i.e., HEARTS, DIAMONDS, CLUBS, SPADES.
     */
    private final Suit suit;

    /**
     * Creates a new card with the specified rank and suit.
     * 
     * @param rank The rank of the new card.
     * @param suit The suit of the new card.
     */
    public PlayingCard(Rank rank, Suit suit) {
        this.rank = rank;
        this.suit = suit;
    }

    /**
     * Returns the rank of the card.
     * 
     * @return The rank of the card.
     */
    public Rank getRank() {
        return rank;
    }

    /**
     * Returns the suit of the card.
     * 
     * @return The suit of the card.
     */
    public Suit getSuit() {
        return suit;
    }

    /**
     * Returns a string representation of the card.
     * 
     * @return A string in the format "RANK of SUIT".
     */
    @Override
    public String toString() {
        return rank + " of " + suit;
    }

    //////////////////////////////////////////////////////////////////////////
    // solution code - remove below this line                               //
    //////////////////////////////////////////////////////////////////////////

    /**
     * Compares this card to the specified object. The result is {@code true} if
     * and only if the argument is not {@code null} and is a {@code PlayingCard}
     * object that has the same rank and suit as this card.
     * 
     * @param obj The object to compare this {@code PlayingCard} against.
     * @return {@code true} if the given object represents a {@code PlayingCard}
     *         equivalent to this card, {@code false} otherwise.
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || !(obj instanceof PlayingCard)) {
            return false;
        }
        PlayingCard other = (PlayingCard) obj;
        return rank == other.rank && suit == other.suit;
    }

    /**
     * Returns a hash code for this card. The hash code is computed based on the
     * rank and suit of the card.
     * 
     * @return A hash code value for this card.
     */
    @Override
    public int hashCode() {
        return 31 * rank.hashCode() + suit.hashCode();
    }

    public static void main(String[] args) {
        PlayingCard card1 = new PlayingCard(Rank.TWO, Suit.HEARTS);
        PlayingCard card2 = new PlayingCard(Rank.TWO, Suit.HEARTS);
        PlayingCard card3 = new PlayingCard(Rank.THREE, Suit.SPADES);

        System.out.println(card1); // Output: TWO of HEARTS
        System.out.println("card1 equals card2: " + card1.equals(card2)); // true
        System.out.println("card1 equals card3: " + card1.equals(card3)); // false
        System.out.println("card1 hashCode: " + card1.hashCode());
        System.out.println("card2 hashCode: " + card2.hashCode());
        System.out.println("card3 hashCode: " + card3.hashCode());
    }
}


