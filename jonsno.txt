/**
 * Author: OpenAI GPT-4
 */
package practicum;

/**
 * Author: OpenAI GPT-4
 */
public class Hogwarts {

    public static void main(String[] args) {

        // Test House characteristics
        for (House house : House.values()) {
            System.out.println(house + ": " + house.getCharacteristic());
        }

        // Test Student
        Student harry = new Student("Harry Potter", House.GRYFFINDOR);
        System.out.println(harry);
        harry.advanceYear();
        System.out.println(harry);

        // Test getYearLevelWithSuffix
        for (int i = 1; i <= 5; i++) {
            harry.advanceYear();
            System.out.println(harry.getYearLevelWithSuffix());
        }

        // Test equality
        Student student1 = new Student("Student1", House.GRYFFINDOR);
        Student student2 = new Student("Student2", House.GRYFFINDOR);
        System.out.println("student1 equals student2: " + student1.equals(student2));

        student2.advanceYear();
        System.out.println("student1 equals student2 after student2 advanced a year: " + student1.equals(student2));

        // Test QuidditchPlayer
        QuidditchPlayer roger = new QuidditchPlayer("Roger Davies", House.RAVENCLAW, Position.CHASER);
        System.out.println(roger);

        // Test QuidditchPlayer equality
        QuidditchPlayer player1 = new QuidditchPlayer("Player1", House.GRYFFINDOR, Position.SEEKER);
        QuidditchPlayer player2 = new QuidditchPlayer("Player2", House.SLYTHERIN, Position.SEEKER);
        System.out.println("player1 equals player2: " + player1.equals(player2));

        // Test advancing year
        player1.advanceYear();
        System.out.println(player1);

        // Should still be equal
        System.out.println("player1 equals player2 after advancing year: " + player1.equals(player2));
    }
}

/**
 * Author: OpenAI GPT-4
 */
enum Position {
    BEATER,
    CHASER,
    KEEPER,
    SEEKER;
}

/**
 * Author: OpenAI GPT-4
 */
enum House {
    GRYFFINDOR("Bravery"),
    HUFFLEPUFF("Empathy"),
    RAVENCLAW("Intelligence"),
    SLYTHERIN("Ambition");

    private final String characteristic;

    private House(String characteristic) {
        this.characteristic = characteristic;
    }

    public String getCharacteristic() {
        return characteristic;
    }
}

/**
 * Author: OpenAI GPT-4
 */
class Student {

    private String name;
    private int yearLevel;
    private House house;

    // Constructor with name and house, year level defaults to 1
    public Student(String name, House house) {
        this.name = name;
        this.house = house;
        this.yearLevel = 1;
    }

    // Accessors for all attributes
    public String getName() {
        return name;
    }

    public int getYearLevel() {
        return yearLevel;
    }

    public House getHouse() {
        return house;
    }

    // Method to get the year level as a string with the appropriate suffix
    public String getYearLevelWithSuffix() {
        return yearLevel + getNumberSuffix(yearLevel);
    }

    private String getNumberSuffix(int number) {
        if (number >= 11 && number <= 13) {
            return "th";
        }
        switch (number % 10) {
            case 1:
                return "st";
            case 2:
                return "nd";
            case 3:
                return "rd";
            default:
                return "th";
        }
    }

    // Method to advance the student by one year, up to a maximum of 7
    public void advanceYear() {
        if (yearLevel < 7) {
            yearLevel++;
        }
    }

    // Two students are considered equal if they are in the same house and at the same year level
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj instanceof Student) {
            Student other = (Student) obj;
            return this.house == other.house && this.yearLevel == other.yearLevel;
        }
        return false;
    }

    @Override
    public int hashCode() {
        return house.hashCode() * 31 + yearLevel;
    }

    // String representation
    @Override
    public String toString() {
        return name + ", a " + getYearLevelWithSuffix() + " year student in " + house + " house";
    }
}

/**
 * Author: OpenAI GPT-4
 */
class QuidditchPlayer extends Student {

    private Position position;

    // Constructor with name, house, and position
    public QuidditchPlayer(String name, House house, Position position) {
        // Call superclass constructor
        super(name, house);
        this.position = position;
    }

    // Accessor for position
    public Position getPosition() {
        return position;
    }

    // Two Quidditch players are considered equal if they play the same position
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj instanceof QuidditchPlayer) {
            QuidditchPlayer other = (QuidditchPlayer) obj;
            return this.position == other.position;
        }
        return false;
    }

    @Override
    public int hashCode() {
        return position.hashCode();
    }

    // String representation
    @Override
    public String toString() {
        return getName() + ", a " + getYearLevelWithSuffix() + " year " + position + " for the " + getHouse()
                + " Quidditch team";
    }
}

